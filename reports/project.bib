

@misc{Chen2021EvaluatingLL,
  title={Evaluating Large Language Models Trained on Code},
  author={Chen, Mark and Tworek, Jerry and Jun, Heewoo and others},
  year={2021},
  archiveprefix = {arXiv},
  eprint    = {2107.03374},
  eprintclass = {cs.LG}
}

@misc{labstudypub,
  title={Do Users Write More Insecure Code with AI Assistants?},
  author={Perry, Neil and Srivastava, Megha and Kumar, Deepak and Boneh, Dan},
  year={2022},
  month=nov,
  archiveprefix = {arXiv},
  eprint    = {2211.03622},
  eprintclass = {cs.CR}
}

@misc{nyuuserstudy,
  title={Security Implications of Large Language Model Code Assistants: A User Study},
  author={Sandoval, Gustavo and Pearce, Hammond and Nys, Teo and Karri, Ramesh and Dolan-Gavitt, Brendan and Garg, Siddharth},
  year={2022},
  archiveprefix = {arXiv},
  eprint    = {2208.09727},
  eprintclass = {cs.CR}
}

@misc{llm-repairs,
  title={Examining Zero-Shot Vulnerability Repair with Large Language Models},
  author={Pearce, Hammond and Tan, Benjamin and Ahmad, Baleegh and Karri, Ramesh and Dolan-Gavitt, Brendan and Garg, Siddharth},
  year={2022},
  archiveprefix = {arXiv},
  eprint    = {2112.02125},
  eprintclass = {cs.CR}
}


@unpublished{labstudy,
  author = {Perry, Neil and Srivastava, Megha and Boneh, Dan},
  title  = "Evaluating security of AI-based programming assistants (unpublished study)",
  year = {2022}
}

@misc{smitop,
    author={Smitty},
    title={How good is Codex?},
    url={https://smitop.com/post/codex/},
    year={2021},
    month=aug
}

@misc{owasp-top10,
    author={OWASP},
    title={OWASP Top 10:2021},
    url={https://owasp.org/Top10/},
    year={2021}
}

@misc{cwe-top25,
    author={MITRE},
    title={2022 CWE Top 25 Most Dangerous Software Weaknesses},
    url={https://cwe.mitre.org/top25/archive/2022/2022_cwe_top25.html},
    year={2022}
}

@manual{go-doccomment,
    author={Go Project},
    title={Go Doc Comments},
    url={https://go.dev/doc/comment},
    }

@online{openai-humaneval,
    author={OpenAI},
    title={{Human\-Eval}: Hand-Written Evaluation Set},
    year={2021},
    organization={GitHub},
    url={https://github.com/openai/human-eval}
}

@misc{ms-codexglue,
  author    = {Shuai Lu and
               Daya Guo and
               Shuo Ren and
               Junjie Huang and
               Alexey Svyatkovskiy and
               Ambrosio Blanco and
               Colin B. Clement and
               Dawn Drain and
               Daxin Jiang and
               Duyu Tang and
               Ge Li and
               Lidong Zhou and
               Linjun Shou and
               Long Zhou and
               Michele Tufano and
               Ming Gong and
               Ming Zhou and
               Nan Duan and
               Neel Sundaresan and
               Shao Kun Deng and
               Shengyu Fu and
               Shujie Liu},
  title     = {CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding
               and Generation},
  year      = {2021},
  archiveprefix = {arXiv},
  eprint    = {2102.04664},
  eprintclass = {cs.SE}
}


@inproceedings{concode,
  author    = {Iyer, Srinivasan and Konstas, Ioannis and Cheung, Alvin and Zettlemoyer, Luke},
  title     = {Mapping Language to Code in Programmatic Context},
  year      = {2018},
  location = {Brussels},
  booktitle = {Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing},
  pages = {1643--1652},
  publisher = {Association for Computational Linguistics},
  url = {https://aclanthology.org/D18-1192.pdf}
}

@article{llm-math,
    author = {Garisto, Dan},
    title = {AI Language Models Are Struggling to ``Get'' Math},
    journal = {IEEE Spectrum},
    url = {https://spectrum.ieee.org/large-language-models-math},
    year = {2022},
    month = oct

}

@online{kite-providers,
    author = {Kite},
    title = {Product Spec: Multi-provider Completions},
    organization={GitHub},
    url = {https://github.com/kiteco/kiteco-public/blob/master/readme_assets/Product%20Spec_%20Multi-provider%20Completions%20(1)%20(1).pdf},
}

@inproceedings{pillars,
author = {Gottschlich, Justin and Solar-Lezama, Armando and Tatbul, Nesime and Carbin, Michael and Rinard, Martin and Barzilay, Regina and Amarasinghe, Saman and Tenenbaum, Joshua B. and Mattson, Tim},
title = {The Three Pillars of Machine Programming},
year = {2018},
isbn = {9781450358347},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3211346.3211355},
doi = {10.1145/3211346.3211355},
abstract = {In this position paper, we describe our vision of the future of machine programming through a categorical examination of three pillars of research. Those pillars are: (i) intention, (ii) invention, and (iii) adaptation. Intention emphasizes advancements in the human-to-computer and computer-to-machine-learning interfaces. Invention emphasizes the creation or refinement of algorithms or core hardware and software building blocks through machine learning (ML). Adaptation emphasizes advances in the use of ML-based constructs to autonomously evolve software.},
booktitle = {Proceedings of the 2{\textsuperscript{nd}} ACM SIGPLAN International Workshop on Machine Learning and Programming Languages},
pages = {69–80},
numpages = {12},
keywords = {program synthesis, machine programming, intention, invention, adaptation, software maintenance, software development},
location = {Philadelphia, PA, USA},
series = {MAPL 2018}
}

@online{codewhisperer-announce-science,
    author = {O'Neill, Sean},
    title = {AWS {Code\-Whis\-per\-er} creates computer code from natural language},
    year={2022},
    month=dec,
    organization={Amazon Science},
    url={https://www.amazon.science/latest-news/aws-codewhisperer-creates-computer-code-from-natural-language}
}

@online{copilot-announce,
    author={Friedman, Nat},
    title={Introducing {GitHub} {Copilot}: your {AI} pair programmer},
    year={2021},
    month=jun,
    organization={GitHub Blog},
    url={https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/}}

@online{cwe,
    author={MITRE},
    title={CWE -- Common Weakness Enumeration},
    url={https://cwe.mitre.org/}}

@online{go-cipher-test,
    author={Go Project, The},
    title={src/crypto/cipher/example\_test.go},
    year={2018},
    month=oct,
    organization={Google Open Source},
    url={https://cs.opensource.google/go/go/+/refs/tags/go1.19.3:src/crypto/cipher/example_test.go}}

@inproceedings{python-crypto-misuses,
author = {Wickert, Anna-Katharina and Baumgärtner, Lars and Breitfelder, Florian and Mezini, Mira},
title = {Python Crypto Misuses in the Wild},
year = {2021},
isbn = {9781450386654},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3475716.3484195},
doi = {10.1145/3475716.3484195},
abstract = {Background: Previous studies have shown that up to 99.59 \% of the Java apps using crypto APIs misuse the API at least once. However, these studies have been conducted on Java and C, while empirical studies for other languages are missing. For example, a controlled user study with crypto tasks in Python has shown that 68.5 \% of the professional developers write a secure solution for a crypto task. Aims: To understand if this observation holds for real-world code, we conducted a study of crypto misuses in Python. Method: We developed a static analysis tool that covers common misuses of 5 different Python crypto APIs. With this analysis, we analyzed 895 popular Python projects from GitHub and 51 MicroPython projects for embedded devices. Further, we compared our results with the findings of previous studies. Results: Our analysis reveals that 52.26 \% of the Python projects have at least one misuse. Further, some Python crypto libraries' API design helps developers from misusing crypto functions, which were much more common in studies conducted with Java and C code. Conclusion: We conclude that we can see a positive impact of the good API design on crypto misuses for Python applications. Further, our analysis of MicroPython projects reveals the importance of hybrid analyses.},
booktitle = {Proceedings of the 15th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
articleno = {31},
numpages = {6},
keywords = {Security, Static Analysis, Crypto API},
location = {Bari, Italy},
series = {ESEM '21}
}

@online{coverity,
    author={Synopsys},
    title={Coverity Scan -- Static Analysis},
    url={https://scan.coverity.com/}}

@online{semgrep,
    author={r2c},
    title={Semgrep},
    url={https://semgrep.dev/docs/}}

@online{gh-codescanning,
    author={Hutchings, Justin},
    title={Code scanning is now available!},
    year={2020},
    month=sep,
    organization={GitHub Blog},
    url={https://github.blog/2020-09-30-code-scanning-is-now-available/}}

@online{codeql,
    author={GitHub},
    title={CodeQL},
    url={https://codeql.github.com/},
    year={2021}}

@online{merly-mentor,
    author={Merly},
    title={Merly Mentor},
    url={https://merly-mentor.ai/}}

@online{codex-trendmicro,
    author={Trend Micro},
    title={Codex Exposed: Exploring the Capabilities and Risks of OpenAI's Code Generator},
    url={https://www.trendmicro.com/en_us/research/22/a/codex-exposed--exploring-the-capabilities-and-risks-of-openai-s-.html},
    year={2022},
    month=jan}

@book{cryptobook,
    author={Boneh, Dan and Shoup, Victor},
    title={A Graduate Course in Applied Cryptography},
    edition={Version 0.5},
    year={2020},
    month=jan,
    url={https://toc.cryptobook.us/}}

@inproceedings{java-crypto-bad,
author = {Nadi, Sarah and Krüger, Stefan and Mezini, Mira and Bodden, Eric},
title = {Jumping through Hoops: Why Do Java Developers Struggle with Cryptography APIs?},
year = {2016},
isbn = {9781450339001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2884781.2884790},
doi = {10.1145/2884781.2884790},
abstract = {To protect sensitive data processed by current applications, developers, whether security experts or not, have to rely on cryptography. While cryptography algorithms have become increasingly advanced, many data breaches occur because developers do not correctly use the corresponding APIs. To guide future research into practical solutions to this problem, we perform an empirical investigation into the obstacles developers face while using the Java cryptography APIs, the tasks they use the APIs for, and the kind of (tool) support they desire. We triangulate data from four separate studies that include the analysis of 100 StackOverflow posts, 100 GitHub repositories, and survey input from 48 developers. We find that while developers find it difficult to use certain cryptographic algorithms correctly, they feel surprisingly confident in selecting the right cryptography concepts (e.g., encryption vs. signatures). We also find that the APIs are generally perceived to be too low-level and that developers prefer more task-based solutions.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering},
pages = {935–946},
numpages = {12},
keywords = {cryptography, empirical software engineering, API misuse},
location = {Austin, Texas},
series = {ICSE '16}
}

@online{chatgpt,
    author={OpenAI},
    title={ChatGPT: Optimizing Language Models for Dialogue},
    year={2022},
    month=nov,
    url={https://openai.com/blog/chatgpt/}}
